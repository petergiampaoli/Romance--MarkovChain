//Romance Word Pairs Function



function removePunctuation(text){
  let newText = '';
  for ( i = 0; i < text.length ; i ++ ){
    if ( text[i] === ',' || text[i]==='.' || text[i] === '!' || text[i]==='?' || text[i] === "'"){
    }else{
    newText += text[i];
    }
    }
  return newText.toLowerCase();
    }
  
let cleanText = removePunctuation(text).split(' ');

//-------------------------------------------------
let wordBank = wordPairs(cleanText);

function wordPairs(arr){
  let pairs = {}
  for ( i = 0 ; i < arr.length ; i ++){
    if (arr.slice(i+1,i+2)==0 ){
    }else if (pairs[arr[i]]){
      pairs[arr[i]].push(arr[i+1]);
    }else{
      pairs[arr[i]] = arr.slice(i+1,i+2);
    }
  }
return (pairs);
}

function pickRandomWord(obj) {
    var result;
    var count = 0;
    for (var key in obj)
        if (Math.random() < 1/++count)
           result = key;
    return result;
}

//---------------------------------------------------------

function writeLine (word, num ){
  let sentence = '';
    if(num < 1 ){
      sentence += word + '. ';
    }
    else if ( wordBank[word] === undefined){
      sentence +=   writeLine(pickRandomWord(wordBank), num -1);
    }
    else if (wordBank[word].length > 1 ){
      sentence += word + ' ' + writeLine(wordBank[word][Math.floor(Math.random()*wordBank[word].length)], num -1);
    }else{
      sentence += word +  ' ' + writeLine(wordBank[word], num -1);
    }
    return sentence; 
}
  
let finalPoem = '';
function generatePoem( corpus, num ){
  let cleanText = removePunctuation(corpus).split(' ');
  let wordBank = wordPairs(cleanText);
  let poemLine = writeLine (pickRandomWord(wordBank),13);
  
    if ( num < 1 ){
  
  }else{  
    finalPoem += poemLine.charAt(0).toUpperCase() + poemLine.slice(1) + generatePoem(corpus , num -1);
  }
  return finalPoem;
  }

generatePoem( text , 7);
